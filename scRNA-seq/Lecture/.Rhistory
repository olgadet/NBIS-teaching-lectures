144-83
144 - 83
14734672*24092/(10^9)
144-91
16*6
15*6
24*3
144 - 91
144 - 91 - 16
40*52
40*52/12
40*48/12
160/4
300/40
300*12*800
?heatmap.2
library(heatmap.2)
library(heatmap.2)
library(heatmap)
library(gplots)
?heatmap.2
144-109
4000/40
100/40
40*40/100
40*30/100
40*35/100
600*10^6
600*10^6/236000
np=32
nm=24+6
np
nm
144-121
144-125
library(diffBind)
library("diffbind")
library("DiffBind")
?dba.count
library(scatterplot3d)
library(scran)
?reducedDimension
40 + 24 + 80
40 + 24 + 80 + 40
144-123
21-16
168-111
204222-204186
library(edgeR)
?cpm
setwd("~/Desktop/scRNA-tutorials")
rm(list=ls())
R<-read.table("data/mouse_embryo/rpkms_Deng2014_preinplantation.txt")
M <- read.table("data/mouse_embryo/Metadata_mouse_embryo.csv",sep=",",header=T)
selection <- c(grep("8cell",M$Stage),grep("16cell",M$Stage))
M<-M[selection,]
R <- R[,selection]
dim(R)
library(Seurat)
data <- CreateSeuratObject(raw.data = R, min.cells = 3, min.genes = 200, project = "ILC",is.expr=1,meta.data=M)
scale.factor <- mean(colSums(R))
data <- NormalizeData(object = data, normalization.method = "LogNormalize",  scale.factor = scale.factor)
dim(data)
data <- ScaleData(object = data, vars.to.regress = c("nGene"),display.progress = F)
head(data@ident)
data <- ScaleData(object = data, vars.to.regress = c("nGene"),display.progress = F)
rm(list=ls())
# we will read both counts and rpkms as different method are more adopted for different type of data
R<-read.table("data/mouse_embryo/rpkms_Deng2014_preinplantation.txt")
M <- read.table("data/mouse_embryo/Metadata_mouse_embryo.csv",sep=",",header=T)
# select only 8 and 16 stage embryos.
selection <- c(grep("8cell",M$Stage),grep("16cell",M$Stage))
# select those cells only from the data frames
M<-M[selection,]
R <- R[,selection]
library(Seurat)
data <- CreateSeuratObject(raw.data = R, min.cells = 3, min.genes = 200, project = "ILC",is.expr=1,meta.data=M)
# Normalize the data
scale.factor <- mean(colSums(R))
data <- NormalizeData(object =
rm(list=ls())
# we will read both counts and rpkms as different method are more adopted for different type of data
R<-read.table("data/mouse_embryo/rpkms_Deng2014_preinplantation.txt")
M <- read.table("data/mouse_embryo/Metadata_mouse_embryo.csv",sep=",",header=T)
# select only 8 and 16 stage embryos.
selection <- c(grep("8cell",M$Stage),grep("16cell",M$Stage))
# select those cells only from the data frames
M<-M[selection,]
R <- R[,selection]
data <- CreateSeuratObject(raw.data = R, min.cells = 3, min.genes = 200, project = "ILC",is.expr=1,meta.data=M)
dim(data)
class(data)
scale.factor <- mean(colSums(R))
data <- NormalizeData(object = data, normalization.method = "LogNormalize",  scale.factor = scale.factor)
data <- ScaleData(object = data, vars.to.regress = c("nGene"),display.progress = F)
methods <- c("bimod","roc","t","tobit")
DE <- list()
methods <- c("bimod","roc","t","tobit")
DE <- list()
for (m in methods){
outfile <- paste("data/mouse_embryo/DE/seurat_",m,"_8cell_vs_16_cell.tab", sep='')
if(!file.exists(outfile)){
DE[[m]]<- FindMarkers(object = data,ident.1 = "X8cell",
ident.2 = "X16cell",test.use = m)
write.table(DE[[m]],file=outfile,sep="\t",quote=F)
}
}
DE <- list()
files <- c("data/mouse_embryo/DE/sc3_kwtest_8cell_vs_16_cell.tab","data/mouse_embryo/DE/scde_8cell_vs_16_cell.tab","data/mouse_embryo/DE/seurat_bimod_8cell_vs_16_cell.tab","data/mouse_embryo/DE/seurat_roc_8cell_vs_16_cell.tab","data/mouse_embryo/DE/seurat_t_8cell_vs_16_cell.tab","data/mouse_embryo/DE/seurat_tobit_8cell_vs_16_cell.tab")
for (i in 1:6){
DE[[i]]<-read.table(files[i],sep="\t",header=T)
}
names(DE)<-c("SC3","SCDE","seurat-bimod","seurat-roc","seurat-t","seurat-tobit")
# MAST file has gene names as first column, read in separately
DE$MAST <- read.table("data/mouse_embryo/DE/mast_8cell_vs_16_cell.tab", sep="\t",header=T,row.names=2)
# get top 100 genes for each test
top.100 <- lapply(DE,function(x) rownames(x)[1:100])
# load a function for plotting overlap
source("data/mouse_embryo/DE/overlap_phyper.R")
# plot overlap and calculate significance with phyper test, as background, set number of genes in seurat.
o <- overlap_phyper(top.100,plot=T,bg=nrow(DE$`seurat-bimod`))
files
?FindMarkers
setwd("~/Desktop/teaching/scRNA-seq/Lecture")
getwd()
5*60/8
5*60/7
8*12
?rnbinom
x<-rnbinom(nrow(dt),size=5.855,mu=1/exp(-3.689))
x<-rnbinom(1000,size=5.855,mu=1/exp(-3.689))
hist(x)
x<-rnbinom(1000,size=5.855,mu=1/exp(-3.689))
?rnbinom
x <- 0:11
dnbinom(x, size = 1, prob = 1/2) * 2^(1 + x) # == 1
126 /  dnbinom(0:8, size  = 2, prob  = 1/2) #- theoretically integer
x <- 0:100
x1 <- rnbinom(500, mu = 4, size = 1)
hist(x1)
x1 <- rnbinom(500, mu = 4, size = 1)
x2 <- rnbinom(500, mu = 4, size = 10)
hist(x2)
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=100), col="grey50", xlab="Read Counts", main="Negative Binomial")
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB");
a = 0.1
b = 0.1
g = 100
lambdas = rbeta(1000, a, b)
counts = sapply(g*lambdas, function(l) {rpois(1, lambda=l)})
hist(counts, col="grey50", xlab="Read Counts", main="Poisson-Beta")
?hist
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=100), col="grey50", xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(500, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T)
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB");
a = 0.1
b = 0.1
g = 100
lambdas = rbeta(1000, a, b)
counts = sapply(g*lambdas, function(l) {rpois(1, lambda=l)})
hist(counts, col="grey50", xlab="Read Counts", main="Poisson-Beta")
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=100), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(500, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T)
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB");
a = 0.1
b = 0.1
g = 100
lambdas = rbeta(1000, a, b)
counts = sapply(g*lambdas, function(l) {rpois(1, lambda=l)})
hist(counts, col="grey50", xlab="Read Counts", main="Poisson-Beta")
graphics.off()
hist(rnbinom(1000, mu=10, size=100), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(500, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T)
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=100), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(1000, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T)
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB");
a = 0.1
b = 0.1
g = 100
lambdas = rbeta(1000, a, b)
counts = sapply(g*lambdas, function(l) {rpois(1, lambda=l)})
hist(counts, col="grey50", xlab="Read Counts", main="Poisson-Beta")
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=100), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial", n=100)
hist(rnbinom(1000, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T)
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB");
a = 0.1
b = 0.1
g = 100
lambdas = rbeta(1000, a, b)
counts = sapply(g*lambdas, function(l) {rpois(1, lambda=l)})
hist(counts, col="grey50", xlab="Read Counts", main="Poisson-Beta")
hist(rnbinom(1000, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T, n=100)
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=100), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial", n=100)
hist(rnbinom(1000, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T, n=100)
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB");
a = 0.1
b = 0.1
g = 100
lambdas = rbeta(1000, a, b)
counts = sapply(g*lambdas, function(l) {rpois(1, lambda=l)})
hist(counts, col="grey50", xlab="Read Counts", main="Poisson-Beta")
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=100), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial", n=50)
hist(rnbinom(1000, mu = 4, size = 1), col=rgb(0.8,0.8,0.8,0.5), add=T, n=50)
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB");
a = 0.1
b = 0.1
g = 100
lambdas = rbeta(1000, a, b)
counts = sapply(g*lambdas, function(l) {rpois(1, lambda=l)})
hist(counts, col="grey50", xlab="Read Counts", main="Poisson-Beta")
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=10, size=1), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial", n=50)
hist(rnbinom(1000, mu = 4, size = 10), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial", n=50)
hist(rnbinom(1000, mu = 4, size = 100), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial", n=50)
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=4, size=1), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial", n=50)
hist(rnbinom(1000, mu = 4, size = 10), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial", n=50)
hist(rnbinom(1000, mu = 4, size = 100), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial", n=50)
hist(rnbinom(1000, mu=4, size=1), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(1000, mu = 4, size = 10), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(1000, mu = 4, size = 100), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial")
load("Scripts/testData.RData")
idx.0 <- apply(data.counts, 1, sum)
idx.00 <- which(idx.0==0)
data.counts <- as.matrix(data.counts)
dim(data.counts)
length(idx.00)
head(data.subset)
data.counts <- as.matrix(data.counts)
data.subset <- as.matrix(data.counts[-idx.00,])
head(data.subset)
dim(data.subset)
legth(m.summary)
length(m.summary)
data.counts <- as.matrix(data.counts)
data.subset <- as.matrix(data.counts[-idx.00,])
m.dummy <- matrix(data=0, nrow=nrow(data.subset), ncol=ncol(data.subset))
m.dummy[data.subset==0]=1
m.summary <- apply(m.dummy, 1, sum)
length(m.summary)
dim(data.subset)
setwd("~/Desktop/teaching/scRNA-seq/Lecture")
setwd("~/Desktop/teaching/scRNA-seq/Lecture")
getw()
getwd()
setwd()
setwd("~/Desktop/Lecture/NBIS-teaching-lectures/scRNA-seq/Lecture")
library(SC3)
?sc3_plot_de_genes
?get_de_genes
?get_marker_genes
?get_de_genes
?get_marker_genes
library(Seurat)
library(dplyr)
?FindMarkers
load("testData.RData")
load("Scripts/testData.RData")
idx.tumor <- which(data.group=="Tumor")
idx.normal <- which(data.group=="Brain")
data.counts <- as.matrix(data.counts)
idx.0 <- which(apply(data.counts, 1, sum)==0)
length(idx.tumor)
length(idx.normal)
dim(data.counts)
head(data.counts)
file.counts <- "../../../DATA/counts.txt"
data.example <- read.delim(file.counts)
idx.tumor <- which(data.group=="Tumor")
idx.normal <- which(data.group=="Brain")
data.counts <- as.matrix(data.counts)
hist(data.group)
head(data.group)
idx.tumor <- which(data.group=="Tumor")
idx.normal <- which(data.group=="Brain")
data.counts <- as.matrix(data.counts)
idx.0 <- which(apply(data.counts, 1, sum)==0)
hist(data.counts[, idx.tumor])
hist(data.counts[, idx.tumor], nbin=100)
hist(data.counts[1 , idx.tumor], nbin=100)
dim(data.counts)
dim(data.counts)
hist(data.counts[1 , idx.tumor], nbin=50)
data.counts[1 , idx.tumor]
idx.tumor
data.counts[, idx.tumor]
hist(as.numeric(data.counts[1, idx.tumor]), nbin=50)
hist(as.numeric(data.counts[1, idx.tumor]), n=50)
?hist
hist(as.numeric(data.counts[1, idx.tumor]))
as.numeric(data.counts[1, idx.tumor])
hist(as.numeric(data.counts[2, idx.tumor]))
hist(as.numeric(data.counts[3, idx.tumor]))
hist(as.numeric(data.counts[3, idx.tumor]), nbin=50)
hist(as.numeric(data.counts[3, idx.tumor]), nbin=25)
hist(as.numeric(data.counts[3, idx.tumor]), n=25)
hist(as.numeric(data.counts[3, idx.tumor]), nbin=25)
hist(as.numeric(data.counts[3, idx.tumor]), n=25)
hist(as.numeric(data.counts[3, idx.tumor]), breaks=5)
hist(as.numeric(data.counts[3, idx.tumor]), breaks=1)
hist(as.numeric(data.counts[3, idx.tumor]), breaks=100)
hist(as.numeric(data.counts[3, idx.tumor]), breaks=100, main="")
hist(as.numeric(data.counts[3, idx.tumor]), breaks=100, main="", xlab="counts")
hist(as.numeric(data.counts[4, idx.tumor]), breaks=100, main="", xlab="counts")
hist(as.numeric(data.counts[5, idx.tumor]), breaks=100, main="", xlab="counts")
hist(as.numeric(data.counts[6, idx.tumor]), breaks=100, main="", xlab="counts")
idx.9
data.features <- apply(data.counts, 1, sum)
length(data.features)
head(data.features)
?sort
idx.top=order(data.features, decreasing = TRUE)
idx.top
idx.top=head(order(data.features, decreasing = TRUE), 9)
idx.top
hist(as.numeric(data.counts[41571, idx.tumor]), breaks=100, main="", xlab="counts")
hist(as.numeric(data.counts[46043, idx.tumor]), breaks=100, main="", xlab="counts")
hist(as.numeric(data.counts[41571, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[46043, idx.tumor]), breaks=50, main="", xlab="counts")
quantile(data.features)
hist(as.numeric(data.counts[6574, idx.tumor]), breaks=100, main="", xlab="counts")
hist(as.numeric(data.counts[6574, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[41571, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[46043, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[6574, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[41571, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[46043, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[6574, idx.tumor]), breaks=50, main="", xlab="counts")
idx.top
hist(as.numeric(data.counts[33627, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[41571, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[33627, idx.tumor]), breaks=50, main="", xlab="counts")
hist(as.numeric(data.counts[6574, idx.tumor]), breaks=50, main="", xlab="counts")
?FindMarkers(
)
d = 0.5;
counts <- rnbinom(1000, mu=15, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
d = 0.5;
counts <- rnbinom(1000, mu=5, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
counts <- rnbinom(1000, mu=20, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
d = 0.9;
counts <- rnbinom(1000, mu=20, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
d = 0.1;
counts <- rnbinom(1000, mu=20, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
d = 0.2;
counts <- rnbinom(1000, mu=20, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
d = 0.5;
counts <- rnbinom(1000, mu=10, size=100);
counts[runif(1000) < d] = 0;
hist(counts, col="grey50", xlab="Read Counts", main="Zero-inflated NB", n=50);
a <- 0.1
b <- 0.1
g <- 100
lambdas <- rbeta(1000, a, b)
counts <- sapply(g*lambdas, function(l) {rpois(1, lambda = l)})
hist(
counts,
col = "grey50",
xlab = "Read Counts",
main = "Poisson-Beta"
)
a <- 0.5
b <- 0.1
g <- 100
lambdas <- rbeta(1000, a, b)
counts <- sapply(g*lambdas, function(l) {rpois(1, lambda = l)})
hist(
counts,
col = "grey50",
xlab = "Read Counts",
main = "Poisson-Beta"
)
a <- 0.4
b <- 0.2
g <- 100
lambdas <- rbeta(1000, a, b)
counts <- sapply(g*lambdas, function(l) {rpois(1, lambda = l)})
hist(
counts,
col = "grey50",
xlab = "Read Counts",
main = "Poisson-Beta"
)
